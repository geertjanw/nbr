/* 
 * Maui, Maltcms User Interface. 
 * Copyright (C) 2008-2014, The authors of Maui. All rights reserved.
 *
 * Project website: http://maltcms.sf.net
 *
 * Maui may be used under the terms of either the
 *
 * GNU Lesser General Public License (LGPL)
 * http://www.gnu.org/licenses/lgpl.html
 *
 * or the
 *
 * Eclipse Public License (EPL)
 * http://www.eclipse.org/org/documents/epl-v10.php
 *
 * As a user/recipient of Maui, you may choose which license to receive the code 
 * under. Certain files or entire directories may not be covered by this 
 * dual license, but are subject to licenses compatible to both LGPL and EPL.
 * License exceptions are explicitly declared in all relevant files or in a 
 * LICENSE file in the relevant directories.
 *
 * Maui is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. Please consult the relevant license documentation
 * for details.
 */
package org.netbeans.r.rserve.options;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Arrays;
import org.netbeans.api.keyring.Keyring;
import org.netbeans.api.progress.ProgressHandle;
import org.netbeans.api.progress.ProgressHandleFactory;
import org.netbeans.r.rserve.api.RserveConnectionFactory;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.Exceptions;
import org.openide.util.NbPreferences;
import org.openide.util.RequestProcessor;
import org.openide.util.RequestProcessor.Task;
import org.openide.util.TaskListener;
import org.rosuda.REngine.REXP;
import org.rosuda.REngine.REXPMismatchException;
import org.rosuda.REngine.Rserve.RConnection;
import org.rosuda.REngine.Rserve.RserveException;

final class RServePanel extends javax.swing.JPanel {

    private final RServeOptionsPanelController controller;

    RServePanel(RServeOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        // TODO listen to changes in form fields and call controller.changed()
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        localRserveSettingsField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        useLocalInstance = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        remoteHostIpField = new javax.swing.JTextField();
        userNameField = new javax.swing.JTextField();
        passwordField = new javax.swing.JPasswordField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        testButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        remoteHostPortField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        debugMode = new javax.swing.JCheckBox();

        localRserveSettingsField.setText(org.openide.util.NbBundle.getMessage(RServePanel.class, "RServePanel.localRserveSettingsField.text")); // NOI18N
        localRserveSettingsField.setToolTipText(org.openide.util.NbBundle.getMessage(RServePanel.class, "RServePanel.localRserveSettingsField.toolTipText")); // NOI18N
        localRserveSettingsField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                localRserveSettingsFieldActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(RServePanel.class, "RServePanel.jLabel1.text")); // NOI18N

        useLocalInstance.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(useLocalInstance, org.openide.util.NbBundle.getMessage(RServePanel.class, "RServePanel.useLocalInstance.text")); // NOI18N
        useLocalInstance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useLocalInstanceActionPerformed(evt);
            }
        });

        remoteHostIpField.setText(org.openide.util.NbBundle.getMessage(RServePanel.class, "RServePanel.remoteHostIpField.text")); // NOI18N
        remoteHostIpField.setEnabled(false);

        userNameField.setText(org.openide.util.NbBundle.getMessage(RServePanel.class, "RServePanel.userNameField.text")); // NOI18N
        userNameField.setEnabled(false);
        userNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userNameFieldActionPerformed(evt);
            }
        });

        passwordField.setText(org.openide.util.NbBundle.getMessage(RServePanel.class, "RServePanel.passwordField.text")); // NOI18N
        passwordField.setEnabled(false);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(RServePanel.class, "RServePanel.jLabel2.text")); // NOI18N

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(RServePanel.class, "RServePanel.jLabel3.text")); // NOI18N

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(RServePanel.class, "RServePanel.jLabel4.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(testButton, org.openide.util.NbBundle.getMessage(RServePanel.class, "RServePanel.testButton.text")); // NOI18N
        testButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testButtonActionPerformed(evt);
            }
        });

        remoteHostPortField.setColumns(5);
        remoteHostPortField.setText(org.openide.util.NbBundle.getMessage(RServePanel.class, "RServePanel.remoteHostPortField.text")); // NOI18N
        remoteHostPortField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remoteHostPortFieldActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(RServePanel.class, "RServePanel.jLabel5.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(debugMode, org.openide.util.NbBundle.getMessage(RServePanel.class, "RServePanel.debugMode.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(remoteHostIpField, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(remoteHostPortField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(localRserveSettingsField)
                            .addComponent(userNameField)
                            .addComponent(passwordField))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSeparator1)
                        .addGap(12, 12, 12))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSeparator2)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(useLocalInstance)
                                .addContainerGap())
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(debugMode)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(testButton)
                                .addGap(12, 12, 12))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(useLocalInstance)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(localRserveSettingsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(remoteHostIpField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(remoteHostPortField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(12, 12, 12)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(testButton)
                    .addComponent(debugMode))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void localRserveSettingsFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_localRserveSettingsFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_localRserveSettingsFieldActionPerformed

    private void useLocalInstanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useLocalInstanceActionPerformed
        updateUseLocalInstance();
    }//GEN-LAST:event_useLocalInstanceActionPerformed

    private void userNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_userNameFieldActionPerformed

    public boolean testRserve() {
        try {
            RConnection connection = RserveConnectionFactory.getDefaultConnection();
            REXP rexp = connection.eval("x <- seq(from=1,by=1,to=10);");
            try {
                System.out.println("Result: "
                        + Arrays.toString(rexp.asDoubles()));
                return true;
            } catch (REXPMismatchException ex) {
                ex.printStackTrace();
            }
        } catch (RserveException ex) {
            ex.printStackTrace();
        }
        return false;
    }

    private void testButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testButtonActionPerformed
        Runnable r = new Runnable() {
            @Override
            public void run() {
                testButton.setEnabled(false);
                try {
//                    StartRserve.checkLocalRserve();
                    if (useLocalInstance.isSelected()) {
                        store();
//                        RConnection testConnection = RserveConnectionFactory.getDefaultConnection();
//                        PlotDemo.createPlotDemo(testConnection);
                        if (testRserve()) {
                            DialogDisplayer.getDefault().notify(new NotifyDescriptor.Message("Connection to Rserve successful!", NotifyDescriptor.INFORMATION_MESSAGE));
                        } else {
                            DialogDisplayer.getDefault().notify(new NotifyDescriptor.Message("Connection to Rserve failed!", NotifyDescriptor.ERROR_MESSAGE));
                        }
                    } else {
                        try {
                            InetAddress address = InetAddress.getByName(remoteHostIpField.getText().trim());
                            int port = Integer.parseInt(remoteHostPortField.getText().trim());
                            store();
//                            RConnection testConnection = RserveConnectionFactory.getInstance().getRemoteConnection(address, port, userNameField.getText(), passwordField.getPassword());
//                            PlotDemo.createPlotDemo(testConnection);
                            if (testRserve()) {
                                DialogDisplayer.getDefault().notify(new NotifyDescriptor.Message("Connection to Rserve successful!", NotifyDescriptor.INFORMATION_MESSAGE));
                            } else {
                                DialogDisplayer.getDefault().notify(new NotifyDescriptor.Message("Connection to Rserve failed!", NotifyDescriptor.ERROR_MESSAGE));
                            }
                        } catch (UnknownHostException ex) {
                            Exceptions.printStackTrace(ex);
                        }

                    }
                } finally {
                    testButton.setEnabled(true);
                }
            }
        };
        RequestProcessor rp = new RequestProcessor("Rserve connection test thread pool", 1, false);
        Task t = rp.create(r);
        final ProgressHandle ph = ProgressHandleFactory.createHandle("Rserve connection test", t);
        t.addTaskListener(new TaskListener() {
            public void taskFinished(org.openide.util.Task task) {
                //make sure that we get rid of the ProgressHandle
                //when the task is finished
                ph.finish();
            }
        });
        ph.start();
        t.schedule(0);
    }//GEN-LAST:event_testButtonActionPerformed

    private void remoteHostPortFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remoteHostPortFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_remoteHostPortFieldActionPerformed

    private void updateUseLocalInstance() {
        if (useLocalInstance.isSelected()) {
            localRserveSettingsField.setEnabled(true);
            remoteHostIpField.setEnabled(false);
            remoteHostPortField.setEnabled(false);
            userNameField.setEnabled(false);
            passwordField.setEnabled(false);
        } else {
            localRserveSettingsField.setEnabled(false);
            remoteHostIpField.setEnabled(true);
            remoteHostPortField.setEnabled(true);
            userNameField.setEnabled(true);
            passwordField.setEnabled(true);
        }
    }

    void load() {
        localRserveSettingsField.setText(NbPreferences.forModule(RserveConnectionFactory.class).get(RserveConnectionFactory.KEY_RSERVEARGS, ""));
        remoteHostIpField.setText(NbPreferences.forModule(RserveConnectionFactory.class).get(RserveConnectionFactory.KEY_RSERVE_HOST, "127.0.0.1"));
        remoteHostPortField.setText(NbPreferences.forModule(RserveConnectionFactory.class).get(RserveConnectionFactory.KEY_RSERVE_PORT, "6311"));
        userNameField.setText(NbPreferences.forModule(RserveConnectionFactory.class).get(RserveConnectionFactory.KEY_RSERVE_USER, ""));
        useLocalInstance.setSelected(Boolean.parseBoolean(NbPreferences.forModule(RserveConnectionFactory.class).get(RserveConnectionFactory.KEY_RSERVE_LOCAL, "true")));
        debugMode.setSelected(Boolean.parseBoolean(NbPreferences.forModule(RserveConnectionFactory.class).get(RserveConnectionFactory.KEY_RSERVE_DEBUG, "false")));
        char[] password = Keyring.read("Rserve://" + remoteHostIpField.getText().trim());
        if (password != null) {
            passwordField.setText(String.valueOf(password));
        }
        updateUseLocalInstance();
    }

    void store() {
        NbPreferences.forModule(RserveConnectionFactory.class).put(RserveConnectionFactory.KEY_RSERVE_LOCAL, useLocalInstance.isSelected() + "");
        NbPreferences.forModule(RserveConnectionFactory.class).put(RserveConnectionFactory.KEY_RSERVEARGS, localRserveSettingsField.getText());
        NbPreferences.forModule(RserveConnectionFactory.class).put(RserveConnectionFactory.KEY_RSERVE_HOST, remoteHostIpField.getText());
        NbPreferences.forModule(RserveConnectionFactory.class).put(RserveConnectionFactory.KEY_RSERVE_PORT, remoteHostPortField.getText());
        NbPreferences.forModule(RserveConnectionFactory.class).put(RserveConnectionFactory.KEY_RSERVE_USER, userNameField.getText());
        if (!remoteHostIpField.getText().isEmpty()) {
            Keyring.save("Rserve://" + remoteHostIpField.getText().trim(), passwordField.getPassword(), "Rserve password for host " + remoteHostIpField.getText());
        }
        NbPreferences.forModule(RserveConnectionFactory.class).put(RserveConnectionFactory.KEY_RSERVE_DEBUG, debugMode.isSelected() + "");
    }

    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox debugMode;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField localRserveSettingsField;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JTextField remoteHostIpField;
    private javax.swing.JTextField remoteHostPortField;
    private javax.swing.JButton testButton;
    private javax.swing.JCheckBox useLocalInstance;
    private javax.swing.JTextField userNameField;
    // End of variables declaration//GEN-END:variables
}
